import React, { useState } from "react";
import { Upload, X, Check, Camera } from "lucide-react";
import { usePhotoStore } from "../store/photo.store.js"; // Assuming you have this store
import { useNavigate } from "react-router-dom";
import Toast from "../Components/Toast.jsx"; // Create this component similar to the example

const CustomAlert = ({ variant = "default", children }) => {
  const styles = {
    default:
      "bg-green-50 dark:bg-gray-800 text-gray-800 dark:text-gray-200 border-gray-200 dark:border-gray-700",
    error:
      "bg-red-50 dark:bg-red-900/30 text-red-800 dark:text-red-200 border-red-200 dark:border-red-800",
    success:
      "bg-green-50 dark:bg-green-900/30 text-green-800 dark:text-green-200 border-green-200 dark:border-green-800",
  };

  return (
    <div
      className={`flex items-center gap-2 p-4 rounded-lg border ${styles[variant]} animate-fadeIn`}
    >
      {children}
    </div>
  );
};

const Photo = () => {
  const [selectedFile, setSelectedFile] = useState(null);
  const [preview, setPreview] = useState(null);
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [showToast, setShowToast] = useState(false);
  const [toastMessage, setToastMessage] = useState({
    title: "",
    description: "",
  });
  const [formData, setFormData] = useState({
    name: "",
    title: "",
    description: "",
    species: "",
    location: "",
  });

  // Sri Lanka wildlife background images grid
  const backgroundTiles = ["", "", "", "", "", "", "", "", "", ""]; // Add your image URLs here

  const { uploadPhoto } = usePhotoStore();
  const navigate = useNavigate();

  const showToastMessage = (title, description) => {
    setToastMessage({ title, description });
    setShowToast(true);
  };

  const handleFileChange = (e) => {
    const file = e.target.files[0];

    if (file) {
      if (!file.type.startsWith("image/")) {
        showToastMessage(
          "Invalid File",
          "Please upload an image file (JPG, PNG)"
        );
        return;
      }

      if (file.size > 10 * 1024 * 1024) {
        showToastMessage("File Too Large", "File size must be less than 10MB");
        return;
      }

      setSelectedFile(file);

      const reader = new FileReader();
      reader.onload = () => {
        setPreview(reader.result);
      };
      reader.readAsDataURL(file);
    }
  };

  const handleSubmit = async (e) => {
    e.preventDefault();

    if (!selectedFile) {
      showToastMessage("Missing Photo", "Please select an image to upload");
      return;
    }

    if (
      !formData.name ||
      !formData.title ||
      !formData.species ||
      !formData.location
    ) {
      showToastMessage("Missing Fields", "Please fill all required fields");
      return;
    }

    setIsSubmitting(true);

    try {
      const data = new FormData();
      data.append("image", selectedFile);
      data.append("name", formData.name);
      data.append("title", formData.title);
      data.append("description", formData.description);
      data.append("species", formData.species);
      data.append("location", formData.location);

      const result = await uploadPhoto(data);

      if (result.success) {
        showToastMessage("Success", "Photo uploaded successfully!");

        // Reset form
        setSelectedFile(null);
        setPreview(null);
        setFormData({
          name: "",
          title: "",
          description: "",
          species: "",
          location: "",
        });

        // Navigate after delay
        setTimeout(() => navigate("/gallery"), 2000);
      } else {
        showToastMessage("Error", result.message || "Failed to upload photo");
      }
    } catch (error) {
      showToastMessage("Error", "Failed to upload photo");
      console.error("Upload error:", error);
    } finally {
      setIsSubmitting(false);
    }
  };

  return (
    <div className="relative min-h-screen overflow-hidden">
      {/* Background Grid (unchanged) */}
      <div className="fixed inset-0 z-0 overflow-hidden">
        <div className="absolute inset-0 bg-black bg-opacity-40 dark:bg-opacity-60 z-10"></div>
        <div className="grid grid-cols-3 md:grid-cols-4 lg:grid-cols-5 gap-0 w-full h-full transform scale-105">
          {/* Your background tiles */}
          {backgroundTiles.map((image, index) => (
            <div key={index} className="relative overflow-hidden">
              <img
                src={image}
                alt={`Wildlife ${index + 1}`}
                className="w-full h-full object-cover opacity-90 hover:opacity-100 transition duration-500 hover:scale-105 transform"
              />
            </div>
          ))}
        </div>
      </div>

      {/* Form Container */}
      <div className="relative z-20 my-20 max-w-2xl mx-auto p-8 bg-white bg-opacity-90 dark:bg-slate-800 dark:bg-opacity-90 rounded-xl shadow-xl transition-all duration-300 hover:shadow-2xl">
        <div className="flex items-center gap-3 mb-8 transform transition-transform hover:translate-x-2">
          <Camera className="w-7 h-7 text-emerald-600 dark:text-emerald-300" />
          <h2 className="text-2xl font-bold text-emerald-700 dark:text-emerald-200">
            Upload Wildlife Photo
          </h2>
        </div>

        <form onSubmit={handleSubmit} className="space-y-6">
          {/* File Upload Area */}
          <div className="relative transition-all duration-300 transform hover:scale-[1.01]">
            {!preview ? (
              <div className="border-3 border-dashed border-emerald-300 dark:border-emerald-600 rounded-lg p-10 text-center hover:border-emerald-500 dark:hover:border-emerald-400 transition-colors bg-white bg-opacity-50 dark:bg-slate-700 dark:bg-opacity-40">
                <input
                  type="file"
                  onChange={handleFileChange}
                  accept="image/*"
                  className="absolute inset-0 w-full h-full opacity-0 cursor-pointer"
                />
                <Upload className="w-16 h-16 mx-auto mb-4 text-emerald-500 dark:text-emerald-300 animate-bounce-slow" />
                <p className="text-emerald-700 dark:text-emerald-200 font-medium">
                  Drag and drop your photo here or click to browse
                </p>
                <p className="text-sm text-emerald-600 dark:text-emerald-300 mt-2 opacity-80">
                  Maximum file size: 10MB (JPG, PNG)
                </p>
              </div>
            ) : (
              <div className="relative rounded-lg overflow-hidden shadow-lg">
                <img
                  src={preview}
                  alt="Preview"
                  className="w-full h-72 object-cover rounded-lg transition-all duration-500 hover:transform hover:scale-105"
                />
                <button
                  type="button"
                  onClick={() => {
                    setSelectedFile(null);
                    setPreview(null);
                  }}
                  className="absolute top-3 right-3 p-2 bg-white dark:bg-slate-700 rounded-full shadow-md hover:bg-gray-100 dark:hover:bg-slate-600 transition-colors duration-200"
                >
                  <X className="w-5 h-5 text-emerald-700 dark:text-emerald-200" />
                </button>
              </div>
            )}
          </div>

          {/* Form Fields */}
          <div className="grid gap-6 bg-white bg-opacity-70 dark:bg-slate-700 dark:bg-opacity-50 p-6 rounded-xl shadow-md">
            <div className="transform transition-all duration-300 hover:translate-y-[-2px]">
              <label className="block text-sm font-medium text-emerald-700 dark:text-emerald-200 mb-2">
                Your Name <span className="text-red-500">*</span>
              </label>
              <input
                type="text"
                value={formData.name}
                onChange={(e) =>
                  setFormData({ ...formData, name: e.target.value })
                }
                placeholder="Enter your name"
                required
                className="w-full px-4 py-3 border rounded-lg bg-emerald-50 dark:bg-slate-600 text-emerald-800 dark:text-emerald-50 border-emerald-200 dark:border-emerald-600 focus:ring-2 focus:ring-emerald-500 focus:border-emerald-500 placeholder-emerald-400 dark:placeholder-emerald-300 transition-all duration-200"
              />
            </div>

            <div className="transform transition-all duration-300 hover:translate-y-[-2px]">
              <label className="block text-sm font-medium text-emerald-700 dark:text-emerald-200 mb-2">
                Title <span className="text-red-500">*</span>
              </label>
              <input
                type="text"
                value={formData.title}
                onChange={(e) =>
                  setFormData({ ...formData, title: e.target.value })
                }
                placeholder="Give your photo a title"
                required
                className="w-full px-4 py-3 border rounded-lg bg-emerald-50 dark:bg-slate-600 text-emerald-800 dark:text-emerald-50 border-emerald-200 dark:border-emerald-600 focus:ring-2 focus:ring-emerald-500 focus:border-emerald-500 placeholder-emerald-400 dark:placeholder-emerald-300 transition-all duration-200"
              />
            </div>

            <div className="transform transition-all duration-300 hover:translate-y-[-2px]">
              <label className="block text-sm font-medium text-emerald-700 dark:text-emerald-200 mb-2">
                Description
              </label>
              <textarea
                value={formData.description}
                onChange={(e) =>
                  setFormData({ ...formData, description: e.target.value })
                }
                placeholder="Tell us about your photo"
                rows="3"
                className="w-full px-4 py-3 border rounded-lg bg-emerald-50 dark:bg-slate-600 text-emerald-800 dark:text-emerald-50 border-emerald-200 dark:border-emerald-600 focus:ring-2 focus:ring-emerald-500 focus:border-emerald-500 placeholder-emerald-400 dark:placeholder-emerald-300 transition-all duration-200"
              />
            </div>

            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
              <div className="space-y-2 transform transition-all duration-300 hover:translate-y-[-2px]">
                <label className="block text-sm font-medium text-emerald-700 dark:text-emerald-200">
                  Species <span className="text-red-500">*</span>
                </label>
                <input
                  type="text"
                  value={formData.species}
                  onChange={(e) =>
                    setFormData({ ...formData, species: e.target.value })
                  }
                  placeholder="Enter species name"
                  required
                  className="w-full px-4 py-3 border rounded-lg bg-emerald-50 dark:bg-slate-600 text-emerald-800 dark:text-emerald-50 border-emerald-200 dark:border-emerald-600 focus:ring-2 focus:ring-emerald-500 focus:border-emerald-500 placeholder-emerald-400 dark:placeholder-emerald-300 transition-all duration-200"
                />
              </div>

              <div className="space-y-2 transform transition-all duration-300 hover:translate-y-[-2px]">
                <label className="block text-sm font-medium text-emerald-700 dark:text-emerald-200">
                  Location <span className="text-red-500">*</span>
                </label>
                <input
                  type="text"
                  value={formData.location}
                  onChange={(e) =>
                    setFormData({ ...formData, location: e.target.value })
                  }
                  placeholder="Enter location name"
                  required
                  className="w-full px-4 py-3 border rounded-lg bg-emerald-50 dark:bg-slate-600 text-emerald-800 dark:text-emerald-50 border-emerald-200 dark:border-emerald-600 focus:ring-2 focus:ring-emerald-500 focus:border-emerald-500 placeholder-emerald-400 dark:placeholder-emerald-300 transition-all duration-200"
                />
              </div>
            </div>
          </div>

          {/* Toast Notification */}
          <Toast
            isVisible={showToast}
            message={toastMessage.title}
            description={toastMessage.description}
            onClose={() => setShowToast(false)}
          />

          {/* Submit Button */}
          <button
            type="submit"
            disabled={isSubmitting || !selectedFile}
            className={`w-full py-4 px-6 rounded-lg text-white font-medium flex items-center justify-center gap-3 transform transition-all duration-300 hover:scale-[1.02] shadow-lg
              ${
                isSubmitting || !selectedFile
                  ? "bg-gray-400 dark:bg-gray-600 cursor-not-allowed shadow-sm"
                  : "bg-gradient-to-r from-emerald-500 to-teal-600 dark:from-emerald-500 dark:to-teal-600 hover:from-emerald-600 hover:to-teal-700 shadow-emerald-200 dark:shadow-emerald-800"
              }`}
          >
            {isSubmitting ? (
              <div className="animate-spin rounded-full h-6 w-6 border-3 border-white border-t-transparent" />
            ) : (
              <>
                <Upload className="w-5 h-5 animate-bounce-slow" />
                Upload Photo
              </>
            )}
          </button>
        </form>
      </div>
    </div>
  );
};

export default Photo;